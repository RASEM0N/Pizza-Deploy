// https://www.prisma.io/docs/orm/prisma-schema/overview
// https://my-js.org/docs/guide/prisma
// https://docs.nestjs.com/recipes/prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String    @unique
  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  imgUrl String

  ingredients Ingredient[]
  items       ProductItem[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model ProductItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  price     Int
  size      Int?
  pizzaType Int?
  CartItem  CartItem[]

  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product    Product?  @relation(fields: [productId], references: [id])
  productId  Int?
  CartItem   CartItem? @relation(fields: [cartItemId], references: [id])
  cartItemId Int?
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items       CartItem[]
  token       String
  totalAmount Int        @default(0)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity    Int          @default(1)
  ingredients Ingredient[]

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int
  cart          Cart        @relation(fields: [cartId], references: [id])
  cartId        Int
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName String
  email    String    @unique
  password String
  role     UserRole  @default(USER)
  verified DateTime?

  provider   String?
  providerId String?

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  previewImageUrl String
  items           StoryItem[]
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sourceUrl String

  story   Story @relation(fields: [storyId], references: [id])
  storyId Int
}
